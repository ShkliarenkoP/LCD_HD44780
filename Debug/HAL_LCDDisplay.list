
HAL_LCDDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a80  08001a80  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a80  08001a80  00011a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a88  08001a88  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a88  08001a88  00011a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000001c  08001aac  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001aac  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e26  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001059  00000000  00000000  00023e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00024ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a0  00000000  00000000  00025308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014480  00000000  00000000  000256a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053de  00000000  00000000  00039b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e536  00000000  00000000  0003ef06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd43c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000edc  00000000  00000000  000bd48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a58 	.word	0x08001a58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08001a58 	.word	0x08001a58

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <strub>:
#include "LCD_Lib.h"

uint16_t LCD_bus[8] = {D7_PIN, D6_PIN, D5_PIN, D4_PIN, D3_PIN, D2_PIN, D1_PIN, D0_PIN};

void strub()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //state of pin MUST BE INVERSE
 80004dc:	2201      	movs	r2, #1
 80004de:	2120      	movs	r1, #32
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <strub+0x28>)
 80004e2:	f000 fdd1 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f000 fb14 	bl	8000b14 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //state of pin MUST BE INVERSE
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <strub+0x28>)
 80004f2:	f000 fdc9 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80004f6:	201e      	movs	r0, #30
 80004f8:	f000 fb0c 	bl	8000b14 <HAL_Delay>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40020400 	.word	0x40020400

08000504 <sendBite>:

void sendBite(uint8_t bite)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MANAGE_PORT, RS, 0); //state of pin MUST BE INVERSE
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	4811      	ldr	r0, [pc, #68]	; (8000558 <sendBite+0x54>)
 8000514:	f000 fdb8 	bl	8001088 <HAL_GPIO_WritePin>

	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e012      	b.n	8000544 <sendBite+0x40>
	{
		HAL_GPIO_WritePin(DATA_PORT, LCD_bus[count], (0b10000000 & (bite << count)));
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <sendBite+0x58>)
 8000522:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <sendBite+0x5c>)
 800053a:	f000 fda5 	bl	8001088 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < NUM_BIT; count++)
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	3301      	adds	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b07      	cmp	r3, #7
 8000548:	d9e9      	bls.n	800051e <sendBite+0x1a>
	}

	strub();
 800054a:	f7ff ffc5 	bl	80004d8 <strub>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020400 	.word	0x40020400
 800055c:	20000000 	.word	0x20000000
 8000560:	40020000 	.word	0x40020000

08000564 <sendData>:

void sendData(uint8_t data)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MANAGE_PORT, RS, 1); //state of pin MUST BE INVERSE
 800056e:	2201      	movs	r2, #1
 8000570:	2108      	movs	r1, #8
 8000572:	4811      	ldr	r0, [pc, #68]	; (80005b8 <sendData+0x54>)
 8000574:	f000 fd88 	bl	8001088 <HAL_GPIO_WritePin>

	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e012      	b.n	80005a4 <sendData+0x40>
	{
		HAL_GPIO_WritePin(DATA_PORT, LCD_bus[count], (0b10000000 & (data << count)));
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <sendData+0x58>)
 8000582:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000586:	79fa      	ldrb	r2, [r7, #7]
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000594:	b2db      	uxtb	r3, r3
 8000596:	461a      	mov	r2, r3
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <sendData+0x5c>)
 800059a:	f000 fd75 	bl	8001088 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < NUM_BIT; count++)
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	3301      	adds	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	d9e9      	bls.n	800057e <sendData+0x1a>
	}

	strub();
 80005aa:	f7ff ff95 	bl	80004d8 <strub>
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020400 	.word	0x40020400
 80005bc:	20000000 	.word	0x20000000
 80005c0:	40020000 	.word	0x40020000

080005c4 <init_8bit_interface>:

//void sendData

void init_8bit_interface()
{/*
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	sendBite(0x01);
	HAL_Delay(2);
*/
/*############################*/

	HAL_Delay(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 faa3 	bl	8000b14 <HAL_Delay>
	sendBite(0x30);
 80005ce:	2030      	movs	r0, #48	; 0x30
 80005d0:	f7ff ff98 	bl	8000504 <sendBite>
	HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fa9d 	bl	8000b14 <HAL_Delay>
	sendBite(0x30);
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f7ff ff92 	bl	8000504 <sendBite>
	HAL_Delay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fa97 	bl	8000b14 <HAL_Delay>
	sendBite(0x08);
 80005e6:	2008      	movs	r0, #8
 80005e8:	f7ff ff8c 	bl	8000504 <sendBite>
	HAL_Delay(1);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 fa91 	bl	8000b14 <HAL_Delay>
	sendBite(0x01);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff ff86 	bl	8000504 <sendBite>
	HAL_Delay(2);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 fa8b 	bl	8000b14 <HAL_Delay>
	sendBite(0x04);
 80005fe:	2004      	movs	r0, #4
 8000600:	f7ff ff80 	bl	8000504 <sendBite>

	sendBite(0x38);
 8000604:	2038      	movs	r0, #56	; 0x38
 8000606:	f7ff ff7d 	bl	8000504 <sendBite>
	HAL_Delay(5);
 800060a:	2005      	movs	r0, #5
 800060c:	f000 fa82 	bl	8000b14 <HAL_Delay>
	sendBite(0x06);
 8000610:	2006      	movs	r0, #6
 8000612:	f7ff ff77 	bl	8000504 <sendBite>
	HAL_Delay(5);
 8000616:	2005      	movs	r0, #5
 8000618:	f000 fa7c 	bl	8000b14 <HAL_Delay>
	sendBite(0x10);
 800061c:	2010      	movs	r0, #16
 800061e:	f7ff ff71 	bl	8000504 <sendBite>
	HAL_Delay(5);
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fa76 	bl	8000b14 <HAL_Delay>
	sendBite(0x0F);
 8000628:	200f      	movs	r0, #15
 800062a:	f7ff ff6b 	bl	8000504 <sendBite>
	HAL_Delay(5);
 800062e:	2005      	movs	r0, #5
 8000630:	f000 fa70 	bl	8000b14 <HAL_Delay>
	sendBite(0x02);
 8000634:	2002      	movs	r0, #2
 8000636:	f7ff ff65 	bl	8000504 <sendBite>
	HAL_Delay(5);
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fa6a 	bl	8000b14 <HAL_Delay>


}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <disablePin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void disablePin()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, D0_PIN, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <disablePin+0x7c>)
 8000650:	f000 fd1a 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D1_PIN, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2102      	movs	r1, #2
 8000658:	4819      	ldr	r0, [pc, #100]	; (80006c0 <disablePin+0x7c>)
 800065a:	f000 fd15 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D2_PIN, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4816      	ldr	r0, [pc, #88]	; (80006c0 <disablePin+0x7c>)
 8000666:	f000 fd0f 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D3_PIN, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <disablePin+0x7c>)
 8000672:	f000 fd09 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D4_PIN, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <disablePin+0x7c>)
 800067c:	f000 fd04 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_PIN, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <disablePin+0x7c>)
 8000686:	f000 fcff 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_PIN, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <disablePin+0x7c>)
 8000690:	f000 fcfa 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D7_PIN, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <disablePin+0x7c>)
 800069a:	f000 fcf5 	bl	8001088 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, RS, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2108      	movs	r1, #8
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <disablePin+0x80>)
 80006a4:	f000 fcf0 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RW, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <disablePin+0x80>)
 80006ae:	f000 fceb 	bl	8001088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, En, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2120      	movs	r1, #32
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <disablePin+0x80>)
 80006b8:	f000 fce6 	bl	8001088 <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 f9b0 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f812 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f87c 	bl	80007d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  disablePin();
 80006d8:	f7ff ffb4 	bl	8000644 <disablePin>
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(MANAGE_PORT, RW, 1);
//  HAL_GPIO_WritePin(MANAGE_PORT, RS, 1);

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);//because pin is invert
  init_8bit_interface();
 80006dc:	f7ff ff72 	bl	80005c4 <init_8bit_interface>
  HAL_Delay(10);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f000 fa17 	bl	8000b14 <HAL_Delay>
//  sendBite(0x02);
//  sendBite(0b11111111);
  while (1)
  {

	  sendData('H');
 80006e6:	2048      	movs	r0, #72	; 0x48
 80006e8:	f7ff ff3c 	bl	8000564 <sendData>
	  HAL_Delay(2000);
 80006ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f0:	f000 fa10 	bl	8000b14 <HAL_Delay>
	  sendData('H');
 80006f4:	e7f7      	b.n	80006e6 <main+0x1e>
	...

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f99e 	bl	8001a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a28      	ldr	r2, [pc, #160]	; (80007c8 <SystemClock_Config+0xd0>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <SystemClock_Config+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xd4>)
 8000746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xd4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800076c:	2310      	movs	r3, #16
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000770:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000776:	2304      	movs	r3, #4
 8000778:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800077a:	2307      	movs	r3, #7
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fcd8 	bl	8001138 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800078e:	f000 f8ad 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 ff3a 	bl	8001628 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ba:	f000 f897 	bl	80008ec <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b3c      	ldr	r3, [pc, #240]	; (80008dc <MX_GPIO_Init+0x10c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <MX_GPIO_Init+0x10c>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <MX_GPIO_Init+0x10c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <MX_GPIO_Init+0x10c>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a26      	ldr	r2, [pc, #152]	; (80008dc <MX_GPIO_Init+0x10c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_GPIO_Init+0x10c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000856:	2200      	movs	r2, #0
 8000858:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800085c:	4820      	ldr	r0, [pc, #128]	; (80008e0 <MX_GPIO_Init+0x110>)
 800085e:	f000 fc13 	bl	8001088 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2138      	movs	r1, #56	; 0x38
 8000866:	481f      	ldr	r0, [pc, #124]	; (80008e4 <MX_GPIO_Init+0x114>)
 8000868:	f000 fc0e 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4819      	ldr	r0, [pc, #100]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000884:	f000 fa7c 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA6
                           PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000888:	f240 73f2 	movw	r3, #2034	; 0x7f2
 800088c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x110>)
 80008a2:	f000 fa6d 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008a6:	2338      	movs	r3, #56	; 0x38
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_GPIO_Init+0x114>)
 80008be:	f000 fa5f 	bl	8000d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2028      	movs	r0, #40	; 0x28
 80008c8:	f000 fa23 	bl	8000d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008cc:	2028      	movs	r0, #40	; 0x28
 80008ce:	f000 fa3c 	bl	8000d4a <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020800 	.word	0x40020800

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000936:	2007      	movs	r0, #7
 8000938:	f000 f9e0 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f89e 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80009a0:	2101      	movs	r1, #1
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <EXTI15_10_IRQHandler+0x18>)
 80009a4:	f000 fb89 	bl	80010ba <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ac:	f000 fba0 	bl	80010f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40020000 	.word	0x40020000

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e2:	490e      	ldr	r1, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f8:	4c0b      	ldr	r4, [pc, #44]	; (8000a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a06:	f7ff ffd7 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f000 fff9 	bl	8001a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fe5b 	bl	80006c8 <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a20:	08001a90 	.word	0x08001a90
  ldr r2, =_sbss
 8000a24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a28:	2000003c 	.word	0x2000003c

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f94f 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff ff48 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f967 	bl	8000d66 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 f92f 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000018 	.word	0x20000018
 8000ad0:	20000014 	.word	0x20000014

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000018 	.word	0x20000018
 8000af8:	20000038 	.word	0x20000038

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000038 	.word	0x20000038

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000018 	.word	0x20000018

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e159      	b.n	8001050 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8148 	bne.w	800104a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d005      	beq.n	8000dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a2 	beq.w	800104a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b57      	ldr	r3, [pc, #348]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a56      	ldr	r2, [pc, #344]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a52      	ldr	r2, [pc, #328]	; (800106c <HAL_GPIO_Init+0x2ec>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d019      	beq.n	8000f82 <HAL_GPIO_Init+0x202>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a48      	ldr	r2, [pc, #288]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0x1fe>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00d      	beq.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_GPIO_Init+0x1f2>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f72:	2307      	movs	r3, #7
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4935      	ldr	r1, [pc, #212]	; (800106c <HAL_GPIO_Init+0x2ec>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff0:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <HAL_GPIO_Init+0x304>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <HAL_GPIO_Init+0x304>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <HAL_GPIO_Init+0x304>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f aea2 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40013800 	.word	0x40013800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	40020800 	.word	0x40020800
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40021000 	.word	0x40021000
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4013      	ands	r3, r2
 80010d2:	041a      	lsls	r2, r3, #16
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	400b      	ands	r3, r1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f806 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e267      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d075      	beq.n	8001242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d00c      	beq.n	800117c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001162:	4b85      	ldr	r3, [pc, #532]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116a:	2b08      	cmp	r3, #8
 800116c:	d112      	bne.n	8001194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116e:	4b82      	ldr	r3, [pc, #520]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800117a:	d10b      	bne.n	8001194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	4b7e      	ldr	r3, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d05b      	beq.n	8001240 <HAL_RCC_OscConfig+0x108>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d157      	bne.n	8001240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e242      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d106      	bne.n	80011ac <HAL_RCC_OscConfig+0x74>
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a75      	ldr	r2, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e01d      	b.n	80011e8 <HAL_RCC_OscConfig+0xb0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x98>
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6f      	ldr	r2, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6c      	ldr	r2, [pc, #432]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0xb0>
 80011d0:	4b69      	ldr	r3, [pc, #420]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a68      	ldr	r2, [pc, #416]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b66      	ldr	r3, [pc, #408]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a65      	ldr	r2, [pc, #404]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d013      	beq.n	8001218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc84 	bl	8000afc <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fc80 	bl	8000afc <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e207      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0xc0>
 8001216:	e014      	b.n	8001242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc70 	bl	8000afc <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fc6c 	bl	8000afc <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1f3      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	4b51      	ldr	r3, [pc, #324]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0xe8>
 800123e:	e000      	b.n	8001242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d063      	beq.n	8001316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d11c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d116      	bne.n	80012a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x152>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e1c7      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	e03a      	b.n	8001316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a8:	4b34      	ldr	r3, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x244>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ae:	f7ff fc25 	bl	8000afc <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc21 	bl	8000afc <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1a8      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4925      	ldr	r1, [pc, #148]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_RCC_OscConfig+0x244>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc04 	bl	8000afc <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc00 	bl	8000afc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e187      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d036      	beq.n	8001390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_RCC_OscConfig+0x248>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff fbe4 	bl	8000afc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fbe0 	bl	8000afc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e167      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x200>
 8001356:	e01b      	b.n	8001390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_RCC_OscConfig+0x248>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fbcd 	bl	8000afc <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	e00e      	b.n	8001384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff fbc9 	bl	8000afc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d907      	bls.n	8001384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e150      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
 8001378:	40023800 	.word	0x40023800
 800137c:	42470000 	.word	0x42470000
 8001380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1ea      	bne.n	8001366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8097 	beq.w	80014cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10f      	bne.n	80013ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b7a      	ldr	r3, [pc, #488]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ce:	4b77      	ldr	r3, [pc, #476]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013da:	4b74      	ldr	r3, [pc, #464]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a73      	ldr	r2, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fb89 	bl	8000afc <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff fb85 	bl	8000afc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e10c      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x2ea>
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	e01c      	b.n	800145c <HAL_RCC_OscConfig+0x324>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x30c>
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a5b      	ldr	r2, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0x324>
 8001444:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a57      	ldr	r2, [pc, #348]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a54      	ldr	r2, [pc, #336]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 0304 	bic.w	r3, r3, #4
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d015      	beq.n	8001490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fb4a 	bl	8000afc <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fb46 	bl	8000afc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e0cb      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0ee      	beq.n	800146c <HAL_RCC_OscConfig+0x334>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fb34 	bl	8000afc <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001498:	f7ff fb30 	bl	8000afc <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0b5      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ee      	bne.n	8001498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a1 	beq.w	8001618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d05c      	beq.n	800159c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d141      	bne.n	800156e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x478>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb04 	bl	8000afc <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fb00 	bl	8000afc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e087      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	491b      	ldr	r1, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x478>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fad9 	bl	8000afc <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff fad5 	bl	8000afc <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e05c      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x416>
 800156c:	e054      	b.n	8001618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x478>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fac2 	bl	8000afc <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fabe 	bl	8000afc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e045      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x444>
 800159a:	e03d      	b.n	8001618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e038      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000
 80015b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4ec>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d028      	beq.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d121      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d11a      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e4:	4013      	ands	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d111      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d107      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0cc      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d90c      	bls.n	8001664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b65      	ldr	r3, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800169e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d044      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e067      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff f9f0 	bl	8000afc <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f9ec 	bl	8000afc <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e04f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d20c      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f950 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08001a70 	.word	0x08001a70
 80017ec:	20000010 	.word	0x20000010
 80017f0:	20000014 	.word	0x20000014

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f8:	b094      	sub	sp, #80	; 0x50
 80017fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001800:	2300      	movs	r3, #0
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001804:	2300      	movs	r3, #0
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180c:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d00d      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x40>
 8001818:	2b08      	cmp	r3, #8
 800181a:	f200 80e1 	bhi.w	80019e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x34>
 8001822:	2b04      	cmp	r3, #4
 8001824:	d003      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x3a>
 8001826:	e0db      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800182c:	e0db      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001830:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001832:	e0d8      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183e:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	2200      	movs	r2, #0
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
 8001854:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
 8001862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001866:	4622      	mov	r2, r4
 8001868:	462b      	mov	r3, r5
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4621      	mov	r1, r4
 8001880:	1a51      	subs	r1, r2, r1
 8001882:	6139      	str	r1, [r7, #16]
 8001884:	4629      	mov	r1, r5
 8001886:	eb63 0301 	sbc.w	r3, r3, r1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001898:	4659      	mov	r1, fp
 800189a:	018b      	lsls	r3, r1, #6
 800189c:	4651      	mov	r1, sl
 800189e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a2:	4651      	mov	r1, sl
 80018a4:	018a      	lsls	r2, r1, #6
 80018a6:	4651      	mov	r1, sl
 80018a8:	ebb2 0801 	subs.w	r8, r2, r1
 80018ac:	4659      	mov	r1, fp
 80018ae:	eb63 0901 	sbc.w	r9, r3, r1
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c6:	4690      	mov	r8, r2
 80018c8:	4699      	mov	r9, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	eb18 0303 	adds.w	r3, r8, r3
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	462b      	mov	r3, r5
 80018d4:	eb49 0303 	adc.w	r3, r9, r3
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018e6:	4629      	mov	r1, r5
 80018e8:	024b      	lsls	r3, r1, #9
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018f0:	4621      	mov	r1, r4
 80018f2:	024a      	lsls	r2, r1, #9
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fa:	2200      	movs	r2, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001904:	f7fe fc66 	bl	80001d4 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001910:	e058      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	4618      	mov	r0, r3
 800191c:	4611      	mov	r1, r2
 800191e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800192c:	4642      	mov	r2, r8
 800192e:	464b      	mov	r3, r9
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	0159      	lsls	r1, r3, #5
 800193a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193e:	0150      	lsls	r0, r2, #5
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4641      	mov	r1, r8
 8001946:	ebb2 0a01 	subs.w	sl, r2, r1
 800194a:	4649      	mov	r1, r9
 800194c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800195c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001964:	ebb2 040a 	subs.w	r4, r2, sl
 8001968:	eb63 050b 	sbc.w	r5, r3, fp
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	00eb      	lsls	r3, r5, #3
 8001976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197a:	00e2      	lsls	r2, r4, #3
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4643      	mov	r3, r8
 8001982:	18e3      	adds	r3, r4, r3
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	464b      	mov	r3, r9
 8001988:	eb45 0303 	adc.w	r3, r5, r3
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199a:	4629      	mov	r1, r5
 800199c:	028b      	lsls	r3, r1, #10
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a4:	4621      	mov	r1, r4
 80019a6:	028a      	lsls	r2, r1, #10
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ae:	2200      	movs	r2, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	61fa      	str	r2, [r7, #28]
 80019b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019b8:	f7fe fc0c 	bl	80001d4 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <__libc_init_array>:
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	4d0d      	ldr	r5, [pc, #52]	; (8001a38 <__libc_init_array+0x38>)
 8001a04:	4c0d      	ldr	r4, [pc, #52]	; (8001a3c <__libc_init_array+0x3c>)
 8001a06:	1b64      	subs	r4, r4, r5
 8001a08:	10a4      	asrs	r4, r4, #2
 8001a0a:	2600      	movs	r6, #0
 8001a0c:	42a6      	cmp	r6, r4
 8001a0e:	d109      	bne.n	8001a24 <__libc_init_array+0x24>
 8001a10:	4d0b      	ldr	r5, [pc, #44]	; (8001a40 <__libc_init_array+0x40>)
 8001a12:	4c0c      	ldr	r4, [pc, #48]	; (8001a44 <__libc_init_array+0x44>)
 8001a14:	f000 f820 	bl	8001a58 <_init>
 8001a18:	1b64      	subs	r4, r4, r5
 8001a1a:	10a4      	asrs	r4, r4, #2
 8001a1c:	2600      	movs	r6, #0
 8001a1e:	42a6      	cmp	r6, r4
 8001a20:	d105      	bne.n	8001a2e <__libc_init_array+0x2e>
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
 8001a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a28:	4798      	blx	r3
 8001a2a:	3601      	adds	r6, #1
 8001a2c:	e7ee      	b.n	8001a0c <__libc_init_array+0xc>
 8001a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a32:	4798      	blx	r3
 8001a34:	3601      	adds	r6, #1
 8001a36:	e7f2      	b.n	8001a1e <__libc_init_array+0x1e>
 8001a38:	08001a88 	.word	0x08001a88
 8001a3c:	08001a88 	.word	0x08001a88
 8001a40:	08001a88 	.word	0x08001a88
 8001a44:	08001a8c 	.word	0x08001a8c

08001a48 <memset>:
 8001a48:	4402      	add	r2, r0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <memset+0xa>
 8001a50:	4770      	bx	lr
 8001a52:	f803 1b01 	strb.w	r1, [r3], #1
 8001a56:	e7f9      	b.n	8001a4c <memset+0x4>

08001a58 <_init>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	bf00      	nop
 8001a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5e:	bc08      	pop	{r3}
 8001a60:	469e      	mov	lr, r3
 8001a62:	4770      	bx	lr

08001a64 <_fini>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr
